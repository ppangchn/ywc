{"ast":null,"code":"import _classCallCheck from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/taptap432/Desktop/ywc/src/pages/Weather/WeatherChart.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\n\nvar WeatherChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherChart, _Component);\n\n  function WeatherChart() {\n    var _this;\n\n    _classCallCheck(this, WeatherChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeatherChart).call(this));\n    _this.state = {\n      weatherData: {}\n    };\n    return _this;\n  }\n\n  _createClass(WeatherChart, [{\n    key: \"setData\",\n    value: function setData(data, selectedDate) {\n      var listTemp = [];\n      var label = [];\n      data.list.map(function (e) {\n        if (moment(e.dt_txt).format('DD MMMM YYYY') === selectedDate) label.push(moment(e.dt_txt).format('LT'));\n        var temp = (e.main.temp - 273.15).toFixed(0);\n        listTemp.push(temp);\n      });\n      var dataSet = [{\n        label: '',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgb(0,25,108)',\n        borderColor: '#6E8FD2',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgb(0,25,108)',\n        pointBackgroundColor: 'rgb(0,25,108)',\n        pointBorderWidth: 8,\n        pointHoverRadius: 8,\n        pointHoverBackgroundColor: 'rgb(0,25,108)',\n        pointHoverBorderColor: 'rgb(0,25,108)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 2,\n        pointHitRadius: 10,\n        data: listTemp,\n        responsive: true\n      }];\n      var weatherData = {\n        labels: label,\n        datasets: dataSet\n      };\n      this.setState({\n        weatherData: weatherData\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          selectedDate = _this$props.selectedDate;\n      if (data) this.setData(data, selectedDate);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var data = props.data,\n          selectedDate = props.selectedDate;\n      if (data) this.setData(data, selectedDate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var weatherData = this.state.weatherData;\n      return React.createElement(Line, {\n        data: weatherData,\n        height: 80,\n        options: {\n          scales: {\n            xAxes: [{\n              fontSize: 50,\n              // gridLines: { color: 'rgb(0,25,108)' },\n              stacked: true,\n              ticks: {\n                fontColor: 'rgb(0,25,108)'\n              },\n              borderColor: 'rgb(0,25,108)'\n            }],\n            yAxes: [{\n              // gridLines: { color: 'rgb(0,25,108)' },\n              stacked: true,\n              ticks: {\n                fontSize: 50,\n                fontColor: 'rgb(0,25,108)',\n                suggestedMin: 0,\n                stepSize: 5\n              }\n            }]\n          },\n          legend: {\n            display: false\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return WeatherChart;\n}(Component);\n\nexport default WeatherChart;","map":{"version":3,"sources":["/Users/taptap432/Desktop/ywc/src/pages/Weather/WeatherChart.js"],"names":["React","Component","Line","moment","WeatherChart","state","weatherData","data","selectedDate","listTemp","label","list","map","e","dt_txt","format","push","temp","main","toFixed","dataSet","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","responsive","labels","datasets","setState","props","setData","scales","xAxes","fontSize","stacked","ticks","fontColor","yAxes","suggestedMin","stepSize","legend","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport moment from 'moment'\n\nclass WeatherChart extends Component {\n  constructor() {\n    super()\n    this.state = { weatherData: {} }\n  }\n  setData(data, selectedDate) {\n    let listTemp = []\n    let label = []\n    data.list.map(e => {\n      if (moment(e.dt_txt).format('DD MMMM YYYY') === selectedDate)\n        label.push(moment(e.dt_txt).format('LT'))\n      let temp = (e.main.temp - 273.15).toFixed(0)\n      listTemp.push(temp)\n    })\n    let dataSet = [\n      {\n        label: '',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgb(0,25,108)',\n        borderColor: '#6E8FD2',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgb(0,25,108)',\n        pointBackgroundColor: 'rgb(0,25,108)',\n        pointBorderWidth: 8,\n        pointHoverRadius: 8,\n        pointHoverBackgroundColor: 'rgb(0,25,108)',\n        pointHoverBorderColor: 'rgb(0,25,108)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 2,\n        pointHitRadius: 10,\n        data: listTemp,\n        responsive: true\n      }\n    ]\n    const weatherData = { labels: label, datasets: dataSet }\n    this.setState({ weatherData })\n  }\n  componentDidMount() {\n    const { data, selectedDate } = this.props\n    if (data) this.setData(data, selectedDate)\n  }\n  componentWillReceiveProps(props) {\n    const { data, selectedDate } = props\n    if (data) this.setData(data, selectedDate)\n  }\n  render() {\n    const { weatherData } = this.state\n    return (\n      <Line\n        data={weatherData}\n        height={80}\n        options={{\n          scales: {\n            xAxes: [\n              {\n                fontSize: 50,\n                // gridLines: { color: 'rgb(0,25,108)' },\n                stacked: true,\n                ticks: { fontColor: 'rgb(0,25,108)' },\n                borderColor: 'rgb(0,25,108)'\n              }\n            ],\n            yAxes: [\n              {\n                // gridLines: { color: 'rgb(0,25,108)' },\n                stacked: true,\n                ticks: {\n                  fontSize: 50,\n                  fontColor: 'rgb(0,25,108)',\n                  suggestedMin: 0,\n                  stepSize: 5\n                }\n              }\n            ]\n          },\n          legend: { display: false }\n        }}\n      />\n    )\n  }\n}\n\nexport default WeatherChart\n"]},"metadata":{},"sourceType":"module"}