{"ast":null,"code":"import _classCallCheck from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/taptap432/Desktop/ywc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/taptap432/Desktop/ywc/src/pages/Weather/WeatherData.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport WeatherDataDetail from './WeatherDataDetail';\n\nvar WeatherData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WeatherData, _Component);\n\n  function WeatherData() {\n    var _this;\n\n    _classCallCheck(this, WeatherData);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeatherData).call(this));\n    _this.state = {\n      averageTemp: 0,\n      currentTemp: 0,\n      listOfData: [],\n      listTemp: [],\n      isCurrentDay: false,\n      showedTemp: 0,\n      tempDes: ''\n    };\n    return _this;\n  }\n\n  _createClass(WeatherData, [{\n    key: \"changeKelvinToCelcius\",\n    value: function changeKelvinToCelcius(averageTemp) {\n      var ans = averageTemp - 273.15;\n      return ans;\n    }\n  }, {\n    key: \"isCurrentDay\",\n    value: function isCurrentDay(selectedDate) {\n      var isCurrentDay = this.state.isCurrentDay;\n      if (moment().format('DD MMMM YYYY') === selectedDate) isCurrentDay = true;else isCurrentDay = false;\n      this.setState({\n        isCurrentDay: isCurrentDay\n      });\n      return isCurrentDay;\n    }\n  }, {\n    key: \"calAverageTemp\",\n    value: function calAverageTemp(data, selectedDate) {\n      this.getAllTemp(data, selectedDate);\n      var listTemp = this.state.listTemp;\n\n      if (listTemp.length > 0) {\n        var total = 0;\n        total = listTemp.reduce(function (total, current) {\n          return current + total;\n        });\n        var averageTemp = total / listTemp.length;\n        averageTemp = this.changeKelvinToCelcius(averageTemp).toFixed(0);\n        this.setState({\n          averageTemp: averageTemp,\n          showedTemp: averageTemp,\n          tempDes: 'Average Temperature'\n        });\n      }\n    }\n  }, {\n    key: \"callCurrentTemp\",\n    value: function callCurrentTemp(data, selectedDate) {\n      var _this2 = this;\n\n      var listOfData = this.state.listOfData;\n      var currentTemp = 0;\n      var isNotFound = true;\n\n      if (data) {\n        data.list.map(function (l) {\n          if (moment(l.dt_txt).format('DD MMMM YYYY') === selectedDate) {\n            if (isNotFound) {\n              currentTemp = _this2.changeKelvinToCelcius(l.main.temp).toFixed(0);\n              var time = moment(l.dt_txt).format('HH');\n              time = +time;\n              console.log(time);\n              if (time == moment().format('HH')) isNotFound = false;else if (time < moment().format('HH') && moment().format('HH') < (time + 3) % 24) isNotFound = false;\n            }\n\n            listOfData.push(l);\n          }\n        });\n      }\n\n      this.setState({\n        currentTemp: currentTemp,\n        showedTemp: currentTemp,\n        tempDes: 'Current Temperature'\n      });\n    }\n  }, {\n    key: \"getAllTemp\",\n    value: function getAllTemp(data, selectedDate) {\n      var _this$state = this.state,\n          listOfData = _this$state.listOfData,\n          listTemp = _this$state.listTemp;\n\n      if (data) {\n        data.list.map(function (l) {\n          if (moment(l.dt_txt).format('DD MMMM YYYY') === selectedDate) {\n            listTemp.push(l.main.temp);\n            listOfData.push(l);\n          }\n        });\n      }\n\n      this.setState({\n        listTemp: listTemp\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.state.listTemp = [];\n      this.state.listOfData = [];\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          selectedDate = _this$props.selectedDate;\n      var isCurrentDay = this.isCurrentDay(selectedDate);\n      if (isCurrentDay) this.callCurrentTemp(data, selectedDate);else this.calAverageTemp(data, selectedDate);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      this.clear();\n      var data = props.data,\n          selectedDate = props.selectedDate;\n      var isCurrentDay = this.isCurrentDay(selectedDate);\n      if (isCurrentDay) this.callCurrentTemp(data, selectedDate);else this.calAverageTemp(data, selectedDate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          tempDes = _this$state2.tempDes,\n          showedTemp = _this$state2.showedTemp,\n          listOfData = _this$state2.listOfData;\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          fontSize: '2vw',\n          display: 'flex',\n          alignSelf: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, tempDes), \": \".concat(showedTemp, \" \\xB0C\")), React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          boxShadow: '-12px 10px 16px -4px #9A9A9A',\n          width: 'fit-content'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, listOfData.map(function (l) {\n        return React.createElement(WeatherDataDetail, {\n          key: l.dt,\n          data: l,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return WeatherData;\n}(Component);\n\nexport default WeatherData;","map":{"version":3,"sources":["/Users/taptap432/Desktop/ywc/src/pages/Weather/WeatherData.js"],"names":["React","Component","moment","WeatherDataDetail","WeatherData","state","averageTemp","currentTemp","listOfData","listTemp","isCurrentDay","showedTemp","tempDes","ans","selectedDate","format","setState","data","getAllTemp","length","total","reduce","current","changeKelvinToCelcius","toFixed","isNotFound","list","map","l","dt_txt","main","temp","time","console","log","push","props","callCurrentTemp","calAverageTemp","clear","display","flexDirection","fontSize","alignSelf","boxShadow","width","dt"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;IAEMC,W;;;;;AACJ,yBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,CADF;AAEXC,MAAAA,WAAW,EAAE,CAFF;AAGXC,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,YAAY,EAAE,KALH;AAMXC,MAAAA,UAAU,EAAE,CAND;AAOXC,MAAAA,OAAO,EAAE;AAPE,KAAb;AAFY;AAWb;;;;0CACqBN,W,EAAa;AACjC,UAAMO,GAAG,GAAGP,WAAW,GAAG,MAA1B;AACA,aAAOO,GAAP;AACD;;;iCACYC,Y,EAAc;AAAA,UACnBJ,YADmB,GACF,KAAKL,KADH,CACnBK,YADmB;AAEzB,UAAIR,MAAM,GAAGa,MAAT,CAAgB,cAAhB,MAAoCD,YAAxC,EAAsDJ,YAAY,GAAG,IAAf,CAAtD,KACKA,YAAY,GAAG,KAAf;AACL,WAAKM,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAZA;AAAF,OAAd;AACA,aAAOA,YAAP;AACD;;;mCACcO,I,EAAMH,Y,EAAc;AACjC,WAAKI,UAAL,CAAgBD,IAAhB,EAAsBH,YAAtB;AADiC,UAEzBL,QAFyB,GAEZ,KAAKJ,KAFO,CAEzBI,QAFyB;;AAGjC,UAAIA,QAAQ,CAACU,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAIC,KAAK,GAAG,CAAZ;AACAA,QAAAA,KAAK,GAAGX,QAAQ,CAACY,MAAT,CAAgB,UAACD,KAAD,EAAQE,OAAR;AAAA,iBAAoBA,OAAO,GAAGF,KAA9B;AAAA,SAAhB,CAAR;AACA,YAAId,WAAW,GAAGc,KAAK,GAAGX,QAAQ,CAACU,MAAnC;AACAb,QAAAA,WAAW,GAAG,KAAKiB,qBAAL,CAA2BjB,WAA3B,EAAwCkB,OAAxC,CAAgD,CAAhD,CAAd;AACA,aAAKR,QAAL,CAAc;AACZV,UAAAA,WAAW,EAAXA,WADY;AAEZK,UAAAA,UAAU,EAAEL,WAFA;AAGZM,UAAAA,OAAO,EAAE;AAHG,SAAd;AAKD;AACF;;;oCACeK,I,EAAMH,Y,EAAc;AAAA;;AAAA,UAC1BN,UAD0B,GACX,KAAKH,KADM,CAC1BG,UAD0B;AAElC,UAAID,WAAW,GAAG,CAAlB;AACA,UAAIkB,UAAU,GAAG,IAAjB;;AACA,UAAIR,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACS,IAAL,CAAUC,GAAV,CAAc,UAAAC,CAAC,EAAI;AACjB,cAAI1B,MAAM,CAAC0B,CAAC,CAACC,MAAH,CAAN,CAAiBd,MAAjB,CAAwB,cAAxB,MAA4CD,YAAhD,EAA8D;AAC5D,gBAAIW,UAAJ,EAAgB;AACdlB,cAAAA,WAAW,GAAG,MAAI,CAACgB,qBAAL,CAA2BK,CAAC,CAACE,IAAF,CAAOC,IAAlC,EAAwCP,OAAxC,CAAgD,CAAhD,CAAd;AACA,kBAAIQ,IAAI,GAAG9B,MAAM,CAAC0B,CAAC,CAACC,MAAH,CAAN,CAAiBd,MAAjB,CAAwB,IAAxB,CAAX;AACAiB,cAAAA,IAAI,GAAG,CAACA,IAAR;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,kBAAIA,IAAI,IAAI9B,MAAM,GAAGa,MAAT,CAAgB,IAAhB,CAAZ,EAAmCU,UAAU,GAAG,KAAb,CAAnC,KACK,IAAIO,IAAI,GAAG9B,MAAM,GAAGa,MAAT,CAAgB,IAAhB,CAAP,IAAgCb,MAAM,GAAGa,MAAT,CAAgB,IAAhB,IAAwB,CAACiB,IAAI,GAAC,CAAN,IAAS,EAArE,EAAyEP,UAAU,GAAG,KAAb;AAC/E;;AACDjB,YAAAA,UAAU,CAAC2B,IAAX,CAAgBP,CAAhB;AACD;AACF,SAZD;AAaD;;AACD,WAAKZ,QAAL,CAAc;AACZT,QAAAA,WAAW,EAAXA,WADY;AAEZI,QAAAA,UAAU,EAAEJ,WAFA;AAGZK,QAAAA,OAAO,EAAE;AAHG,OAAd;AAKD;;;+BACUK,I,EAAMH,Y,EAAc;AAAA,wBACI,KAAKT,KADT;AAAA,UACrBG,UADqB,eACrBA,UADqB;AAAA,UACTC,QADS,eACTA,QADS;;AAE7B,UAAIQ,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACS,IAAL,CAAUC,GAAV,CAAc,UAAAC,CAAC,EAAI;AACjB,cAAI1B,MAAM,CAAC0B,CAAC,CAACC,MAAH,CAAN,CAAiBd,MAAjB,CAAwB,cAAxB,MAA4CD,YAAhD,EAA8D;AAC5DL,YAAAA,QAAQ,CAAC0B,IAAT,CAAcP,CAAC,CAACE,IAAF,CAAOC,IAArB;AACAvB,YAAAA,UAAU,CAAC2B,IAAX,CAAgBP,CAAhB;AACD;AACF,SALD;AAMD;;AACD,WAAKZ,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAARA;AAAF,OAAd;AACD;;;4BACO;AACN,WAAKJ,KAAL,CAAWI,QAAX,GAAsB,EAAtB;AACA,WAAKJ,KAAL,CAAWG,UAAX,GAAwB,EAAxB;AACD;;;wCACmB;AAAA,wBACa,KAAK4B,KADlB;AAAA,UACVnB,IADU,eACVA,IADU;AAAA,UACJH,YADI,eACJA,YADI;AAElB,UAAMJ,YAAY,GAAG,KAAKA,YAAL,CAAkBI,YAAlB,CAArB;AACA,UAAIJ,YAAJ,EAAkB,KAAK2B,eAAL,CAAqBpB,IAArB,EAA2BH,YAA3B,EAAlB,KACK,KAAKwB,cAAL,CAAoBrB,IAApB,EAA0BH,YAA1B;AACN;;;8CACyBsB,K,EAAO;AAC/B,WAAKG,KAAL;AAD+B,UAEvBtB,IAFuB,GAEAmB,KAFA,CAEvBnB,IAFuB;AAAA,UAEjBH,YAFiB,GAEAsB,KAFA,CAEjBtB,YAFiB;AAG/B,UAAMJ,YAAY,GAAG,KAAKA,YAAL,CAAkBI,YAAlB,CAArB;AACA,UAAIJ,YAAJ,EAAkB,KAAK2B,eAAL,CAAqBpB,IAArB,EAA2BH,YAA3B,EAAlB,KACK,KAAKwB,cAAL,CAAoBrB,IAApB,EAA0BH,YAA1B;AACN;;;6BACQ;AAAA,yBACqC,KAAKT,KAD1C;AAAA,UACCO,OADD,gBACCA,OADD;AAAA,UACUD,UADV,gBACUA,UADV;AAAA,UACsBH,UADtB,gBACsBA,UADtB;AAEP,aACE;AAAK,QAAA,KAAK,EAAE;AAAEgC,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,aAAa,EAAE;AAAlC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAE;AAAED,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAE;AAAEE,UAAAA,QAAQ,EAAE,KAAZ;AAAmBF,UAAAA,OAAO,EAAE,MAA5B;AAAoCG,UAAAA,SAAS,EAAE;AAA/C,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGG/B,OAHH,CADF,cAMQD,UANR,YADF,EASE;AACE,QAAA,KAAK,EAAE;AACL6B,UAAAA,OAAO,EAAE,MADJ;AAELI,UAAAA,SAAS,EAAE,8BAFN;AAGLC,UAAAA,KAAK,EAAE;AAHF,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGrC,UAAU,CAACmB,GAAX,CAAe,UAAAC,CAAC,EAAI;AACnB,eAAO,oBAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEA,CAAC,CAACkB,EAA1B;AAA8B,UAAA,IAAI,EAAElB,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFA,CAPH,CATF,CADF;AAuBD;;;;EAtHuB3B,S;;AAyH1B,eAAeG,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport WeatherDataDetail from './WeatherDataDetail'\n\nclass WeatherData extends Component {\n  constructor() {\n    super()\n    this.state = {\n      averageTemp: 0,\n      currentTemp: 0,\n      listOfData: [],\n      listTemp: [],\n      isCurrentDay: false,\n      showedTemp: 0,\n      tempDes: ''\n    }\n  }\n  changeKelvinToCelcius(averageTemp) {\n    const ans = averageTemp - 273.15\n    return ans\n  }\n  isCurrentDay(selectedDate) {\n    let { isCurrentDay } = this.state\n    if (moment().format('DD MMMM YYYY') === selectedDate) isCurrentDay = true\n    else isCurrentDay = false\n    this.setState({ isCurrentDay })\n    return isCurrentDay\n  }\n  calAverageTemp(data, selectedDate) {\n    this.getAllTemp(data, selectedDate)\n    const { listTemp } = this.state\n    if (listTemp.length > 0) {\n      let total = 0\n      total = listTemp.reduce((total, current) => current + total)\n      let averageTemp = total / listTemp.length\n      averageTemp = this.changeKelvinToCelcius(averageTemp).toFixed(0)\n      this.setState({\n        averageTemp,\n        showedTemp: averageTemp,\n        tempDes: 'Average Temperature'\n      })\n    }\n  }\n  callCurrentTemp(data, selectedDate) {\n    const { listOfData } = this.state\n    let currentTemp = 0\n    let isNotFound = true\n    if (data) {\n      data.list.map(l => {\n        if (moment(l.dt_txt).format('DD MMMM YYYY') === selectedDate) {\n          if (isNotFound) {\n            currentTemp = this.changeKelvinToCelcius(l.main.temp).toFixed(0)\n            let time = moment(l.dt_txt).format('HH');\n            time = +time\n            console.log(time)\n            if (time == moment().format('HH')) isNotFound = false\n            else if (time < moment().format('HH') && moment().format('HH') < (time+3)%24) isNotFound = false\n          }\n          listOfData.push(l)\n        }\n      })\n    }\n    this.setState({\n      currentTemp,\n      showedTemp: currentTemp,\n      tempDes: 'Current Temperature'\n    })\n  }\n  getAllTemp(data, selectedDate) {\n    const { listOfData, listTemp } = this.state\n    if (data) {\n      data.list.map(l => {\n        if (moment(l.dt_txt).format('DD MMMM YYYY') === selectedDate) {\n          listTemp.push(l.main.temp)\n          listOfData.push(l)\n        }\n      })\n    }\n    this.setState({ listTemp })\n  }\n  clear() {\n    this.state.listTemp = []\n    this.state.listOfData = []\n  }\n  componentDidMount() {\n    const { data, selectedDate } = this.props\n    const isCurrentDay = this.isCurrentDay(selectedDate)\n    if (isCurrentDay) this.callCurrentTemp(data, selectedDate)\n    else this.calAverageTemp(data, selectedDate)\n  }\n  componentWillReceiveProps(props) {\n    this.clear()\n    const { data, selectedDate } = props\n    const isCurrentDay = this.isCurrentDay(selectedDate)\n    if (isCurrentDay) this.callCurrentTemp(data, selectedDate)\n    else this.calAverageTemp(data, selectedDate)\n  }\n  render() {\n    const { tempDes, showedTemp, listOfData } = this.state\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <div style={{ display: 'flex' }}>\n          <div\n            style={{ fontSize: '2vw', display: 'flex', alignSelf: 'center' }}\n          >\n            {tempDes}\n          </div>\n          {`: ${showedTemp} °C`}\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            boxShadow: '-12px 10px 16px -4px #9A9A9A',\n            width: 'fit-content'\n          }}\n        >\n          {listOfData.map(l => {\n            return <WeatherDataDetail key={l.dt} data={l} />\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WeatherData\n"]},"metadata":{},"sourceType":"module"}